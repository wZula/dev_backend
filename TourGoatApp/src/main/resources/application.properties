# ===============================
# = DATA SOURCE
# ===============================

## Set here configurations for the database connection
## ======================================
## Connection url for the database MYSQL DB
## ======================================
#spring.datasource.url = jdbc:mysql://localhost:8889/netgloo_blog
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver
## Username and password
#spring.datasource.username = root
#spring.datasource.password = root
#
## Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
##spring.datasource.validationQuery = SELECT 1


# Set here configurations for the database connection
# ======================================
# Connection url for the database PostgresSql DB local
# ======================================
#spring.datasource.url = jdbc:postgresql://localhost:5432/goat
#spring.datasource.driverClassName=org.postgresql.Driver
## Username and password
#spring.datasource.username = postgres
#spring.datasource.password = password
#spring.jpa.hibernate.ddl-auto = create-drop

# Set here configurations for the database connection
# ======================================
# Connection url for the database PostgresSql DB cloud
# ======================================
#spring.datasource.url = postgres://byppnyro:7q4FvVzvMTys7L5nxDSJP7auq8Nv6Z0H@pellefant.db.elephantsql.com:5432/byppnyro
#spring.datasource.driverClassName=org.postgresql.Driver
## Username and password
#spring.datasource.username = byppnyro
#spring.datasource.password = 7q4FvVzvMTys7L5nxDSJP7auq8Nv6Z0H
#spring.jpa.hibernate.ddl-auto = create-drop

#TomCat Server
#server.tomcat.remote_ip_header=x-forwarded-for
#server.tomcat.protocol_header=x-forwarded-proto

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.generate-dll=true
spring.jpa.hibernate.ddl-auto=create-drop
endpoints.env.enabled=true
endpoints.env.sensitive=false
server.port=8080
logging.level.org.springframework.web=DEBUG
logging.level.co.agileventure.jwtauth=DEBUG
facebook.secret=358fcdb49ca4f7bf4efc53256b35c4c1
google.secret=cULpFLudS5EWCFu6PfnsW2bW